name: ci-cd-pipeline

on:
  push: # for test
    branches:
      - develop
  pull_request:
    branches:
      - stage
      - main

permissions:
  id-token: write
  contents: read

env:
  SHA: ${{ github.sha }}
  ECR_REPOSITORY_NESTJS: 'hh-nestjs-modified'
  ECR_REPOSITORY_NGINX: 'hh-nginx'
  DATABASE_CONNECTION: 'postgres'
  DATABASE_HOST: '127.0.0.1'
  DATABASE_PORT: '5432'
  DATABASE_USERNAME: 'postgres'
  DATABASE_PASSWORD: 'postgres'
  DATABASE_NAME: 'postgres'

jobs:
  test:
    name: test nestjs
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: checkout
        uses: actions/checkout@v4.0.0

      - name: setup node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3.3.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: install dependencies
        run: npm install

      - name: run lint
        run: npm run lint

      - name: run tests
        run: npm run test

      - name: run e2e tests
        run: npm run test:e2e

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3.15.1
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: ${{ github.actor }}
          channel: ${{ secrets.SLACK_CHANNEL }}
          username: ${{ secrets.SLACK_USERNAME }}
          text: 'Tests failed! :x:'
        env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  build_and_deploy:
    name: build docker image and ecs deploy
    runs-on: ubuntu-22.04
    needs: test

    steps:
      - name: checkout
        uses: actions/checkout@v4.0.0

      - name: configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ap-northeast-2
          role-to-assume: arn:aws:iam::332034673285:role/MyGithubOIDC
          role-session-name: MyGithubOIDC

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Nginx
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NGINX }}:latest

      - name: Build and push NestJS
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NESTJS }}:${{ github.sha }}

      - name: Build and push NestJS
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nestjs .
          docker push ${{ secrets.DOCKER_USERNAME }}/nestjs

      #     # Deploy to ECS
      # - name: Deploy to ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     service: ${{ env.ECS_SERVICE_NAME }}
      #     cluster: ${{ env.ECS_CLUSTER_NAME }}
      #     wait-for-service-stability: true